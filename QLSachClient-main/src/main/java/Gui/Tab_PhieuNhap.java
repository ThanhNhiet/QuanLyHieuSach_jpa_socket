/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Gui;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.InstanceCreator;
import com.google.gson.reflect.TypeToken;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import dao.ChiTietPhieuNhapDAO;
import dao.PhieuNhapDAO;
import entity.ChiTietHoaDon;
import entity.ChiTietPhieuNhap;
import entity.HoaDon;
import entity.NhanVien;
import entity.PhieuNhap;
import entity.Sach;
import entity.SanPham;
import entity.VPP;
import jakarta.persistence.EntityManager;

import java.awt.Desktop;
import java.awt.image.BufferedImage;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.lang.reflect.Type;
import java.net.Socket;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Scanner;
import java.sql.Date;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author LENOVO
 */
public class Tab_PhieuNhap extends javax.swing.JPanel {
	private Socket socket;
	PrintWriter out;
	Scanner sc;
	int xacNhan;
	public static File fontFile = new File("src/main/java/Font/vuArial.ttf");
	/**
	 * Creates new form Tab_Sach
	 */
	DefaultTableModel dtm = null;

	public Tab_PhieuNhap(Socket socket) {

		this.socket = socket;
		try {
			out = new PrintWriter(socket.getOutputStream(), true);
			sc = new Scanner(socket.getInputStream());
		} catch (Exception e) {
			e.printStackTrace();
		}
		initComponents();
		loadTblPhieuNhap();
	}

	// clear table phiếu nhập
	public void clearTablePhieuNhap() {
		dtm = (DefaultTableModel) jTable_DanhSachPhieuNhap.getModel();
		dtm.setRowCount(0);
	}

	// load table phiếu nhập
	public void loadTblPhieuNhap() {
		clearTablePhieuNhap();
		clearTableChiTietPhieuNhap();
		dtm = (DefaultTableModel) jTable_DanhSachPhieuNhap.getModel();
		try {
			out.println("QLPN");
			out.println("getAllPN");
			String listObject = sc.nextLine();
			List<PhieuNhap> dspn = new Gson().fromJson(listObject, new TypeToken<List<PhieuNhap>>() {
			}.getType());
			String listObjectTT = sc.nextLine();
			double[] listTongTien = new Gson().fromJson(listObjectTT, new TypeToken<double[]>() {
			}.getType());
			int index = 0;
			for (PhieuNhap pn : dspn) {
				SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
				String date = sdf.format(pn.getNgayNhap());
				Object[] rowData = { pn.getMaPhieuNhap(), date, listTongTien[index] };
				dtm.addRow(rowData);
				index++;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// clear table sản phẩm
	public void clearTableChiTietPhieuNhap() {
		dtm = (DefaultTableModel) jTable_ChiTietPhieuNhap.getModel();
		dtm.setRowCount(0);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jLabelQuanLyPhieuNhap = new javax.swing.JLabel();
		jPanelThongTinPhieuNhap = new javax.swing.JPanel();
		jScrollPanePhieuNhap = new javax.swing.JScrollPane();
		jTable_DanhSachPhieuNhap = new javax.swing.JTable();
		jPanelChiTietPhieuNhap = new javax.swing.JPanel();
		jScrollPaneChiTietPhieuNhap = new javax.swing.JScrollPane();
		jTable_ChiTietPhieuNhap = new javax.swing.JTable();
		jPanelThongTinTimKiem = new javax.swing.JPanel();
		jButtonAll = new javax.swing.JButton();
		jLabelFrom = new javax.swing.JLabel();
		jDateChooserFrom = new com.toedter.calendar.JDateChooser();
		jLabelTo = new javax.swing.JLabel();
		jDateChooserTo = new com.toedter.calendar.JDateChooser();
		btnTimKiem = new javax.swing.JButton();
		btnXuatChiTietPhieuNhap = new javax.swing.JButton();
		btnXuatDanhSachPhieuNhap = new javax.swing.JButton();

		setBackground(new java.awt.Color(255, 255, 255));
		setPreferredSize(new java.awt.Dimension(1260, 530));
		setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

		jLabelQuanLyPhieuNhap.setBackground(new java.awt.Color(255, 255, 255));
		jLabelQuanLyPhieuNhap.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
		jLabelQuanLyPhieuNhap.setForeground(new java.awt.Color(255, 51, 0));
		jLabelQuanLyPhieuNhap.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		jLabelQuanLyPhieuNhap.setText("QUẢN LÝ PHIẾU NHẬP");
		add(jLabelQuanLyPhieuNhap, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1270, 30));

		jPanelThongTinPhieuNhap.setBorder(javax.swing.BorderFactory.createTitledBorder("THÔNG TIN PHIẾU NHẬP"));
		jPanelThongTinPhieuNhap.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

		jTable_DanhSachPhieuNhap.setModel(new javax.swing.table.DefaultTableModel(new Object[][] {

		}, new String[] { "MÃ PHIẾU NHẬP", "NGÀY NHẬP", "TỔNG TIỀN" }));
		jTable_DanhSachPhieuNhap.setRowHeight(30);
		jTable_DanhSachPhieuNhap.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mousePressed(java.awt.event.MouseEvent evt) {
				jTable_DanhSachPhieuNhapMousePressed(evt);
			}
		});
		jScrollPanePhieuNhap.setViewportView(jTable_DanhSachPhieuNhap);

		jPanelThongTinPhieuNhap.add(jScrollPanePhieuNhap,
				new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 1230, 150));

		add(jPanelThongTinPhieuNhap, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 180, 1270, 190));

		jPanelChiTietPhieuNhap.setBorder(javax.swing.BorderFactory.createTitledBorder("CHI TIẾT PHIẾU NHẬP"));
		jPanelChiTietPhieuNhap.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

		jTable_ChiTietPhieuNhap.setModel(new javax.swing.table.DefaultTableModel(new Object[][] {

		}, new String[] { "MÃ SP", "TÊN SP", "LOẠI SẢN PHẨM", "SỐ LƯỢNG", "ĐƠN GIÁ", "THÀNH TIỀN" }));
		jTable_ChiTietPhieuNhap.setRowHeight(30);
		jScrollPaneChiTietPhieuNhap.setViewportView(jTable_ChiTietPhieuNhap);

		jPanelChiTietPhieuNhap.add(jScrollPaneChiTietPhieuNhap,
				new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 1230, 120));

		add(jPanelChiTietPhieuNhap, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 380, 1270, 150));

		jPanelThongTinTimKiem.setBackground(new java.awt.Color(255, 255, 255));
		jPanelThongTinTimKiem.setBorder(javax.swing.BorderFactory.createTitledBorder("THÔNG TIN TÌM KIẾM"));
		jPanelThongTinTimKiem.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

		jButtonAll.setText("ALL");
		jButtonAll.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonAllActionPerformed(evt);
			}
		});
		jPanelThongTinTimKiem.add(jButtonAll, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 60, 40));

		jLabelFrom.setText("TỪ NGÀY:");
		jPanelThongTinTimKiem.add(jLabelFrom, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 30, 70, 40));

		jDateChooserFrom.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
			public void propertyChange(java.beans.PropertyChangeEvent evt) {
				jDateChooserFromPropertyChange(evt);
			}
		});
		jPanelThongTinTimKiem.add(jDateChooserFrom,
				new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 30, 260, 40));

		jLabelTo.setText("ĐẾN NGÀY:");
		jPanelThongTinTimKiem.add(jLabelTo, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 30, 70, 40));

		jDateChooserTo.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
			public void propertyChange(java.beans.PropertyChangeEvent evt) {
				jDateChooserToPropertyChange(evt);
			}
		});
		jPanelThongTinTimKiem.add(jDateChooserTo, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 30, 260, 40));

		btnTimKiem.setBackground(new java.awt.Color(255, 153, 0));
		btnTimKiem.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
		btnTimKiem.setForeground(new java.awt.Color(255, 255, 255));
		btnTimKiem.setText("TÌM KIẾM");
		btnTimKiem.setBorder(null);
		btnTimKiem.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnTimKiemActionPerformed(evt);
			}
		});
		jPanelThongTinTimKiem.add(btnTimKiem, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 80, 190, 40));

		add(jPanelThongTinTimKiem, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 910, 130));

		btnXuatChiTietPhieuNhap.setBackground(new java.awt.Color(153, 255, 204));
		btnXuatChiTietPhieuNhap.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
		btnXuatChiTietPhieuNhap.setForeground(new java.awt.Color(102, 153, 255));
		btnXuatChiTietPhieuNhap.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/pdf-icon.png"))); // NOI18N
		btnXuatChiTietPhieuNhap.setText("XUẤT CHI TIẾT PHIẾU NHẬP");
		btnXuatChiTietPhieuNhap.setBorder(null);
		btnXuatChiTietPhieuNhap.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnXuatChiTietPhieuNhapActionPerformed(evt);
			}
		});
		add(btnXuatChiTietPhieuNhap, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 50, 280, 40));

		btnXuatDanhSachPhieuNhap.setBackground(new java.awt.Color(153, 255, 204));
		btnXuatDanhSachPhieuNhap.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
		btnXuatDanhSachPhieuNhap.setForeground(new java.awt.Color(102, 153, 255));
		btnXuatDanhSachPhieuNhap
				.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/icons8_ms_excel_30px.png"))); // NOI18N
		btnXuatDanhSachPhieuNhap.setText("XUẤT DANH SÁCH PHIẾU NHẬP");
		btnXuatDanhSachPhieuNhap.setBorder(null);
		btnXuatDanhSachPhieuNhap.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnXuatDanhSachPhieuNhapActionPerformed(evt);
			}
		});
		add(btnXuatDanhSachPhieuNhap, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 100, 280, 40));
	}// </editor-fold>//GEN-END:initComponents

	private void jTable_DanhSachPhieuNhapMousePressed(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jTable_DanhSachPhieuNhapMousePressed
		// TODO add your handling code here:
		int row = jTable_DanhSachPhieuNhap.getSelectedRow();

		DefaultTableModel dtm = (DefaultTableModel) jTable_DanhSachPhieuNhap.getModel();
		String id = dtm.getValueAt(row, 0).toString().trim();

		loadTblChiTietPhieuNhap(id);
	}// GEN-LAST:event_jTable_DanhSachPhieuNhapMousePressed

	private void btnTimKiemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnTimKiemActionPerformed
		if (jDateChooserFrom.getDate() == null || jDateChooserTo.getDate() == null) {
			JOptionPane.showMessageDialog(this, "Vui lòng chọn ngày");
			return;
		}

		else if (jDateChooserFrom.getDate().after(jDateChooserTo.getDate())) {
			JOptionPane.showMessageDialog(this, "Ngày bắt đầu phải trước ngày kết thúc");
			return;
		}

		clearTablePhieuNhap();
		clearTableChiTietPhieuNhap();
		SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");

		try {
			dtm = (DefaultTableModel) jTable_DanhSachPhieuNhap.getModel();
			out.println("QLPN");
			out.println("btnTimKiem");
			
			String from = formatter.format(jDateChooserFrom.getDate());
			out.println(from);
			String to = formatter.format(jDateChooserTo.getDate());
			out.println(to);
			
			String listObject = sc.nextLine();
			List<PhieuNhap> dspn = new Gson().fromJson(listObject, new TypeToken<List<PhieuNhap>>() {
			}.getType());
			String listObjectTT = sc.nextLine();
			double[] listTongTien = new Gson().fromJson(listObjectTT, new TypeToken<double[]>() {
			}.getType());
			int index = 0;
			
			for (PhieuNhap pn : dspn) {
				String date = sdf.format(pn.getNgayNhap());
				Object[] rowData = { pn.getMaPhieuNhap(), date, listTongTien[index] };
				dtm.addRow(rowData);
				index++;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

	}// GEN-LAST:event_btnTimKiemActionPerformed

	private void btnXuatChiTietPhieuNhapActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnXuatChiTietPhieuNhapActionPerformed
		try {
			xacNhan = JOptionPane.showConfirmDialog(this, "Bạn có muốn xem file", "Thông báo",
					JOptionPane.YES_NO_OPTION);
			xuatFilePDF();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}// GEN-LAST:event_btnXuatChiTietPhieuNhapActionPerformed

	private void btnXuatDanhSachPhieuNhapActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnXuatDanhSachPhieuNhapActionPerformed
		String[] Columns = { "MÃ PHIẾU NHẬP", "NGÀY NHẬP", "TỔNG TIỀN" };
		XSSFWorkbook excelJTableExport = new XSSFWorkbook();
		XSSFSheet excelSheet = excelJTableExport.createSheet("Danh sách phiếu nhập");
		BufferedOutputStream excelBos = null;
		try {

			// Chọn nơi lưu
			JFileChooser excelFileChooser = new JFileChooser();
			// Tiêu đề ô save
			excelFileChooser.setDialogTitle("Save As ..");
			// Định dạng chỉ xls, xlsx, xlsm files
			FileNameExtensionFilter fnef = new FileNameExtensionFilter("Files", "xls", "xlsx", "xlsm");
			excelFileChooser.setFileFilter(fnef);
			int chooser = excelFileChooser.showSaveDialog(null);
			XSSFCell excelCell = null;
			// Kiểm tra nút save nhấn chưa
			if (chooser == JFileChooser.APPROVE_OPTION) {
				// Nếu click thì đẩy dữ liệ
				// Tạo tiêu đề
				XSSFRow excelRow = excelSheet.createRow(0);
				for (int j = 0; j < jTable_DanhSachPhieuNhap.getColumnCount(); j++) {
					excelCell = excelRow.createCell(j);
					excelCell.setCellValue(Columns[j]);
				}
				// Vòng lặp qua cột và hàng của bảng jtable_DanhSachHoaDon để lấy giá trị
				for (int i = 1; i <= jTable_DanhSachPhieuNhap.getRowCount(); i++) {
					excelRow = excelSheet.createRow(i);
					for (int j = 0; j < jTable_DanhSachPhieuNhap.getColumnCount(); j++) {
						excelCell = excelRow.createCell(j);
						excelCell.setCellValue(jTable_DanhSachPhieuNhap.getValueAt(i - 1, j).toString());
					}
				}
				FileOutputStream excelFos = new FileOutputStream(excelFileChooser.getSelectedFile() + ".xlsx");
				excelBos = new BufferedOutputStream(excelFos);
				excelJTableExport.write(excelBos);
				JOptionPane.showMessageDialog(null, "Xuất danh sách phiếu nhập thành công");
			}

		} catch (FileNotFoundException ex) {
			JOptionPane.showMessageDialog(null, ex);
		} catch (IOException ex) {
			JOptionPane.showMessageDialog(null, ex);
		} finally {
			try {
				if (excelBos != null) {
					excelBos.close();
				}
				if (excelJTableExport != null) {
					excelJTableExport.close();
				}
			} catch (IOException ex) {
				JOptionPane.showMessageDialog(null, ex);
			}
		}
	}// GEN-LAST:event_btnXuatDanhSachPhieuNhapActionPerformed

	private void jButtonAllActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonAllActionPerformed
		loadTblPhieuNhap();
	}// GEN-LAST:event_jButtonAllActionPerformed

	private void jDateChooserFromPropertyChange(java.beans.PropertyChangeEvent evt) {// GEN-FIRST:event_jDateChooserFromPropertyChange
		// TODO add your handling code here:

	}// GEN-LAST:event_jDateChooserFromPropertyChange

	private void jDateChooserToPropertyChange(java.beans.PropertyChangeEvent evt) {// GEN-FIRST:event_jDateChooserToPropertyChange
		// TODO add your handling code here:

	}// GEN-LAST:event_jDateChooserToPropertyChange

	private boolean isTuNgayValid() {
		long milis = System.currentTimeMillis();
		Date currentDate = new Date(milis);
		if (jDateChooserFrom.getDate().getTime() - currentDate.getTime() > 0) {
			JOptionPane.showMessageDialog(null, "Ngày phải bé hơn hoặc bằng ngày hiện tại");
			return false;
		}

		return true;
	}

	private boolean isDenNgayValid() {
		long milis = System.currentTimeMillis();
		Date currentDate = new Date(milis);
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
		String from = formatter.format(jDateChooserFrom.getDate());
		String to = formatter.format(jDateChooserTo.getDate());
		Date tuNgay = Date.valueOf(from);
		Date denNgay = Date.valueOf(to);

		if (denNgay.getTime() - currentDate.getTime() > 0) {
			JOptionPane.showMessageDialog(null, "Ngày phải bé hơn hoặc bằng ngày hiện tại");
			return false;
		}

		if (tuNgay.getTime() - denNgay.getTime() > 0) {
			JOptionPane.showMessageDialog(null, "Đến ngày phải có giá trị nhỏ hơn từ ngày");

			return false;
		}
		return true;
	}

	public void loadTblChiTietPhieuNhap(String id) {
		clearTableChiTietPhieuNhap();
		try {
			out.println("QLPN");
			out.println("getCTPN_id");
			out.println(id);
			dtm = (DefaultTableModel) jTable_ChiTietPhieuNhap.getModel();

			String listObjectSach = sc.nextLine();
			// Tạo một InstanceCreator mới cho lớp SanPham
			InstanceCreator<SanPham> sachInstanceCreator = new InstanceCreator<SanPham>() {
				@Override
				public SanPham createInstance(Type type) {
					return new Sach();
				}
			};
			// Đăng ký InstanceCreator cho lớp SanPham khi tạo Gson
			Gson gsonSach = new GsonBuilder().registerTypeAdapter(SanPham.class, sachInstanceCreator).create();
			List<ChiTietPhieuNhap> listCTPNSach = gsonSach.fromJson(listObjectSach,
					new TypeToken<List<ChiTietPhieuNhap>>() {
					}.getType());

			String listObjectVPP = sc.nextLine();
			InstanceCreator<SanPham> vppInstanceCreator = new InstanceCreator<SanPham>() {
				@Override
				public SanPham createInstance(Type type) {
					return new VPP();
				}
			};
			Gson gsonVPP = new GsonBuilder().registerTypeAdapter(SanPham.class, vppInstanceCreator).create();
			List<ChiTietPhieuNhap> listCTPNVPP = gsonVPP.fromJson(listObjectVPP,
					new TypeToken<List<ChiTietPhieuNhap>>() {
					}.getType());

			for (ChiTietPhieuNhap ctpn : listCTPNSach) {
				if (ctpn.getSanPham() instanceof Sach) {
					Object[] rowData = { ctpn.getSanPham().getMaSP(), ctpn.getSanPham().getTenSP(), "Sách",
							ctpn.getSoLuong(), ctpn.getSanPham().getDonGiaBan(), ctpn.thanhTien() };
					dtm.addRow(rowData);
				}
			}
			for (ChiTietPhieuNhap ctpn : listCTPNVPP) {
				if (ctpn.getSanPham() instanceof VPP) {
					Object[] rowData = { ctpn.getSanPham().getMaSP(), ctpn.getSanPham().getTenSP(), "Văn phòng phẩm",
							ctpn.getSoLuong(), ctpn.getSanPham().getDonGiaBan(), ctpn.thanhTien() };
					dtm.addRow(rowData);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public void xuatFilePDF() {
		try {
			out.println("QLPN");
			out.println("btnXuatPhieuNhap");
			int row = jTable_DanhSachPhieuNhap.getSelectedRow();
			if (row == -1) {
				JOptionPane.showMessageDialog(null, "Vui lòng chọn hoá đơn cần xuất");
			}
			dtm = (DefaultTableModel) jTable_DanhSachPhieuNhap.getModel();
			String id = dtm.getValueAt(row, 0).toString();
			out.println(id);

			String object = sc.nextLine();
			PhieuNhap pn = new Gson().fromJson(object, new TypeToken<PhieuNhap>() {
			}.getType());

			InstanceCreator<SanPham> sanPhamInstanceCreator = new InstanceCreator<SanPham>() {
				@Override
				public SanPham createInstance(Type type) {
					return new Sach();
				}
			};

			// Đăng ký InstanceCreator cho lớp SanPham khi tạo Gson
			Gson gson = new GsonBuilder().registerTypeAdapter(SanPham.class, sanPhamInstanceCreator).create();
			String listCTPNS = sc.nextLine();
			List<ChiTietPhieuNhap> listCTPN = gson.fromJson(listCTPNS, new TypeToken<List<ChiTietPhieuNhap>>() {
			}.getType());

			String path = pn.getMaPhieuNhap();
			path = "PhieuNhapPDF\\" + path + ".pdf";
			if (!path.matches("(.)+(\\.pdf)$")) {
				path += ".pdf";
			}

			Document doc = new Document();
			doc.setPageSize(PageSize._11X17);
			try {
				Locale localeVN = new Locale("vi", "VN");
				NumberFormat currencyVN = NumberFormat.getCurrencyInstance(localeVN);

				PdfWriter.getInstance(doc, new FileOutputStream(path));

				BaseFont bf = BaseFont.createFont(fontFile.getAbsolutePath(), BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
				com.itextpdf.text.Font font = new com.itextpdf.text.Font(bf, 15);
				com.itextpdf.text.Font fontTitle = new com.itextpdf.text.Font(bf, 25);
				com.itextpdf.text.Font fontDC = new com.itextpdf.text.Font(bf, 25);
				doc.open();

				doc.add(new Paragraph("Hiệu sách Lucky", fontTitle));
				doc.add(new Paragraph("Địa chỉ: Nguyễn Văn Bảo, Phường 4, Gò Vấp", fontDC));
				doc.add(new Paragraph("Mã phiếu nhập: " + pn.getMaPhieuNhap(), font));
				doc.add(new Paragraph("Ngày Lập: " + pn.getNgayNhap(), font));
				doc.add(new Paragraph(" "));
				doc.add(new Paragraph(" "));

				PdfPTable tbl = new PdfPTable(4);

				PdfPCell cell0 = new PdfPCell();
				Phrase phr0 = new Phrase("Tên sản phẩm", font);
				cell0.setPhrase(phr0);

				PdfPCell cell1 = new PdfPCell();
				Phrase phr1 = new Phrase("Số lượng", font);
				cell1.setPhrase(phr1);

				PdfPCell cell2 = new PdfPCell();
				Phrase phr2 = new Phrase("Đơn giá", font);
				cell2.setPhrase(phr2);

				PdfPCell cell3 = new PdfPCell();
				Phrase phr3 = new Phrase("Thành tiền", font);
				cell3.setPhrase(phr3);

				tbl.addCell(cell0);
				tbl.addCell(cell1);
				tbl.addCell(cell2);
				tbl.addCell(cell3);
				double tongCong = 0;
				for (ChiTietPhieuNhap ctpn : listCTPN) {
					String sp = ctpn.getSanPham().getTenSP();
					int sl = ctpn.getSoLuong();
					String slS = String.valueOf(sl);
					double donGia = ctpn.getSanPham().getDonGiaBan();
					String donGiaS = currencyVN.format(donGia);
					double thanhTien = ctpn.thanhTien();
					String thanhTienS = currencyVN.format(thanhTien);

					PdfPCell cSP = new PdfPCell();
					Phrase phrSP = new Phrase(sp, font);
					cSP.setPhrase(phrSP);

					PdfPCell cSL = new PdfPCell();
					Phrase phrSl = new Phrase(slS, font);
					cSL.setPhrase(phrSl);

					PdfPCell cDg = new PdfPCell();
					Phrase phrDg = new Phrase(donGiaS, font);
					cDg.setPhrase(phrDg);

					PdfPCell cTT = new PdfPCell();
					Phrase phrTT = new Phrase(thanhTienS, font);
					cTT.setPhrase(phrTT);

					tbl.addCell(cSP);
					tbl.addCell(cSL);
					tbl.addCell(cDg);
					tbl.addCell(cTT);

					tongCong = tongCong + thanhTien;
				}

				doc.add(tbl);
				doc.add(new Paragraph(" "));
				String tongCongS = currencyVN.format(tongCong);
				doc.add(new Paragraph("Tổng cộng: " + tongCongS, font));
				doc.close();
				if (xacNhan == JOptionPane.YES_OPTION) {
					Desktop.getDesktop().open(new File(path));
				} else {
					JOptionPane.showMessageDialog(this, "Xuất phiếu nhập " + pn.getMaPhieuNhap() + " Thành công");
				}
			} catch (FileNotFoundException ex) {
				ex.printStackTrace();
			} catch (DocumentException ex) {
				ex.printStackTrace();
			} catch (IOException ex) {
				ex.printStackTrace();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		out.flush();
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton btnTimKiem;
	private javax.swing.JButton btnXuatChiTietPhieuNhap;
	private javax.swing.JButton btnXuatDanhSachPhieuNhap;
	private javax.swing.JButton jButtonAll;
	private com.toedter.calendar.JDateChooser jDateChooserFrom;
	private com.toedter.calendar.JDateChooser jDateChooserTo;
	private javax.swing.JLabel jLabelFrom;
	private javax.swing.JLabel jLabelQuanLyPhieuNhap;
	private javax.swing.JLabel jLabelTo;
	private javax.swing.JPanel jPanelChiTietPhieuNhap;
	private javax.swing.JPanel jPanelThongTinPhieuNhap;
	private javax.swing.JPanel jPanelThongTinTimKiem;
	private javax.swing.JScrollPane jScrollPaneChiTietPhieuNhap;
	private javax.swing.JScrollPane jScrollPanePhieuNhap;
	private javax.swing.JTable jTable_ChiTietPhieuNhap;
	private javax.swing.JTable jTable_DanhSachPhieuNhap;
	// End of variables declaration//GEN-END:variables
}
